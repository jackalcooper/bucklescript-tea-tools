// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE
'use strict';

var List         = require("bs-platform/lib/js/list.js");
var $$String     = require("bs-platform/lib/js/string.js");
var Js_dict      = require("bs-platform/lib/js/js_dict.js");
var Cheerio      = require("cheerio");
var Pervasives   = require("bs-platform/lib/js/pervasives.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var elements = /* :: */[
  "br",
  /* :: */[
    "br'",
    /* :: */[
      "div",
      /* :: */[
        "span",
        /* :: */[
          "p",
          /* :: */[
            "pre",
            /* :: */[
              "a",
              /* :: */[
                "section",
                /* :: */[
                  "header",
                  /* :: */[
                    "footer",
                    /* :: */[
                      "h1",
                      /* :: */[
                        "h2",
                        /* :: */[
                          "h3",
                          /* :: */[
                            "h4",
                            /* :: */[
                              "h5",
                              /* :: */[
                                "h6",
                                /* :: */[
                                  "i",
                                  /* :: */[
                                    "strong",
                                    /* :: */[
                                      "button",
                                      /* :: */[
                                        "input",
                                        /* :: */[
                                          "textarea",
                                          /* :: */[
                                            "label",
                                            /* :: */[
                                              "ul",
                                              /* :: */[
                                                "ol",
                                                /* :: */[
                                                  "li",
                                                  /* :: */[
                                                    "table",
                                                    /* :: */[
                                                      "thead",
                                                      /* :: */[
                                                        "tfoot",
                                                        /* :: */[
                                                          "tbody",
                                                          /* :: */[
                                                            "th",
                                                            /* :: */[
                                                              "tr",
                                                              /* :: */[
                                                                "td",
                                                                /* :: */[
                                                                  "progress",
                                                                  /* :: */[
                                                                    "img",
                                                                    /* :: */[
                                                                      "select",
                                                                      /* :: */[
                                                                        "option'",
                                                                        /* :: */[
                                                                          "form",
                                                                          /* :: */[
                                                                            "nav",
                                                                            /* [] */0
                                                                          ]
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

var properties = /* :: */[
  "id",
  /* :: */[
    "href",
    /* :: */[
      "src",
      /* :: */[
        "style",
        /* :: */[
          "styles",
          /* :: */[
            "placeholder",
            /* :: */[
              "autofocus",
              /* :: */[
                "value",
                /* :: */[
                  "name",
                  /* :: */[
                    "checked",
                    /* :: */[
                      "hidden",
                      /* :: */[
                        "target",
                        /* :: */[
                          "action",
                          /* :: */[
                            "onCB",
                            /* :: */[
                              "onMsg",
                              /* :: */[
                                "onInputOpt",
                                /* :: */[
                                  "onInput",
                                  /* :: */[
                                    "onChangeOpt",
                                    /* :: */[
                                      "onChange",
                                      /* :: */[
                                        "onClick",
                                        /* :: */[
                                          "onDoubleClick",
                                          /* :: */[
                                            "onBlur",
                                            /* :: */[
                                              "onFocus",
                                              /* :: */[
                                                "onCheckOpt",
                                                /* :: */[
                                                  "onCheck",
                                                  /* :: */[
                                                    "onMouseDown",
                                                    /* :: */[
                                                      "onMouseUp",
                                                      /* :: */[
                                                        "onMouseEnter",
                                                        /* :: */[
                                                          "onMouseLeave",
                                                          /* :: */[
                                                            "onMouseOver",
                                                            /* :: */[
                                                              "onMouseOut",
                                                              /* [] */0
                                                            ]
                                                          ]
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function wrapString(str) {
  if (str === "") {
    return "\"\"";
  } else {
    var noneAscii;
    try {
      noneAscii = Js_primitive.null_to_opt(str.match((/[\u{0080}-\u{FFFF}"]/gu)));
    }
    catch (exn){
      noneAscii = /* None */0;
    }
    if (noneAscii) {
      return "{js|" + (str + "|js}");
    } else {
      return "\"" + (str + "\"");
    }
  }
}

function wrapList(str) {
  if (str === "") {
    return "[]";
  } else {
    return "[ " + (str + " ]");
  }
}

function listFromArray(arr) {
  return wrapList(arr.join("\n; "));
}

function wrapTuple(str) {
  return "(" + (str + ")");
}

function tupleFromArray(arr) {
  return wrapTuple(arr.join(", "));
}

function tupleFromList(list) {
  return wrapTuple($$String.concat(", ", list));
}

function constructAttribute(attribute) {
  var name = attribute[0];
  switch (name) {
    case "checked" : 
        if (attribute[1] === "checked") {
          return "checked true";
        } else {
          return "checked false";
        }
        break;
    case "class" : 
        var value = attribute[1];
        var classArray = value.split(" ");
        var length = classArray.length;
        if (length < 2) {
          return $$String.concat(" ", /* :: */[
                      "class'",
                      /* :: */[
                        wrapString(value),
                        /* [] */0
                      ]
                    ]);
        } else {
          var translateClass = function (clazz) {
            var list_000 = wrapString(clazz);
            var list_001 = /* :: */[
              Pervasives.string_of_bool(/* true */1),
              /* [] */0
            ];
            var list = /* :: */[
              list_000,
              list_001
            ];
            return wrapTuple($$String.concat(", ", list));
          };
          var arr = classArray.map(translateClass);
          var list = wrapList(arr.join("\n; "));
          return $$String.concat(" ", /* :: */[
                      "classList",
                      /* :: */[
                        list,
                        /* [] */0
                      ]
                    ]);
        }
        break;
    case "style" : 
        var translatePair = function (pairStr) {
          var tempList = pairStr.split(":").reduce((function (list, item) {
                  return List.append(list, /* :: */[
                              item.trim(),
                              /* [] */0
                            ]);
                }), /* [] */0);
          if (tempList) {
            var match = tempList[1];
            if (match) {
              return /* Some */[/* tuple */[
                        wrapString(tempList[0]),
                        wrapString(match[0])
                      ]];
            } else {
              return /* None */0;
            }
          } else {
            return /* None */0;
          }
        };
        var pairArray = attribute[1].split(";").map(translatePair);
        var pairList = pairArray.reduce((function (list, item) {
                if (item) {
                  return /* :: */[
                          item[0],
                          list
                        ];
                } else {
                  return list;
                }
              }), /* [] */0);
        var tupleToTuple = function (param) {
          return wrapTuple($$String.concat(", ", /* :: */[
                          param[0],
                          /* :: */[
                            param[1],
                            /* [] */0
                          ]
                        ]));
        };
        var exit = 0;
        if (pairList) {
          if (pairList[1]) {
            exit = 1;
          } else {
            var match = pairList[0];
            return $$String.concat(" ", /* :: */[
                        "style",
                        /* :: */[
                          match[0],
                          /* :: */[
                            match[1],
                            /* [] */0
                          ]
                        ]
                      ]);
          }
        } else {
          exit = 1;
        }
        if (exit === 1) {
          return $$String.concat(" ", /* :: */[
                      "styles",
                      /* :: */[
                        wrapList($$String.concat("; ", List.map(tupleToTuple, pairList))),
                        /* [] */0
                      ]
                    ]);
        }
        break;
    default:
      if (List.mem(name, properties)) {
        return $$String.concat(" ", /* :: */[
                    name,
                    /* :: */[
                      wrapString(attribute[1]),
                      /* [] */0
                    ]
                  ]);
      } else {
        return $$String.concat(" ", /* :: */[
                    "Vdom.prop",
                    /* :: */[
                      wrapString(attribute[0]),
                      /* :: */[
                        wrapString(attribute[1]),
                        /* [] */0
                      ]
                    ]
                  ]);
      }
  }
}

function constructAttributeArray(attributes) {
  var arr = attributes.map(constructAttribute);
  return wrapList(arr.join("\n; "));
}

function convertElement(element) {
  var name;
  try {
    name = element.name;
  }
  catch (exn){
    name = "";
  }
  var attributes;
  try {
    attributes = Js_dict.entries(element.attribs);
  }
  catch (exn$1){
    attributes = /* array */[];
  }
  var childNodes;
  try {
    childNodes = Js_dict.values(element.children);
  }
  catch (exn$2){
    childNodes = /* array */[];
  }
  var nodeType;
  try {
    nodeType = element.type;
  }
  catch (exn$3){
    nodeType = "text";
  }
  switch (nodeType) {
    case "tag" : 
        if (List.mem(name, elements)) {
          if (name === "br") {
            return $$String.concat(" ", /* :: */[
                        "br",
                        /* :: */[
                          constructAttributeArray(attributes),
                          /* [] */0
                        ]
                      ]);
          } else {
            var name$1 = name === "input" ? "input'" : (
                List.mem(name, elements) ? name : $$String.concat(" ", /* :: */[
                        "Vdom.fullnode",
                        /* :: */[
                          wrapString(""),
                          /* :: */[
                            wrapString(name),
                            /* :: */[
                              wrapString(""),
                              /* [] */0
                            ]
                          ]
                        ]
                      ])
              );
            var arr = childNodes.map(convertElement).filter((function (x) {
                    return +(x !== "");
                  }));
            return $$String.concat("\n", /* :: */[
                        name$1,
                        /* :: */[
                          constructAttributeArray(attributes),
                          /* :: */[
                            wrapList(arr.join("\n; ")),
                            /* [] */0
                          ]
                        ]
                      ]);
          }
        } else {
          return "";
        }
        break;
    case "text" : 
        var text = element.data;
        var trimmed = text.trim();
        if (trimmed === "") {
          return "";
        } else {
          return $$String.concat(" ", /* :: */[
                      "text",
                      /* :: */[
                        wrapString(trimmed),
                        /* [] */0
                      ]
                    ]);
        }
    default:
      return "";
  }
}

function convertElementArray(elementArray) {
  var convertedArray = elementArray.map(convertElement);
  var length = convertedArray.length;
  if (length === 1) {
    return convertedArray.filter((function (x) {
                    return +(x !== "");
                  })).join();
  } else {
    var arr = convertedArray.filter((function (x) {
            return +(x !== "");
          }));
    return $$String.concat(" ", /* :: */[
                "div",
                /* :: */[
                  wrapList(""),
                  /* :: */[
                    wrapList(arr.join("\n; ")),
                    /* [] */0
                  ]
                ]
              ]);
  }
}

function convert(str) {
  var elementArray = Cheerio.parseHTML(str);
  console.log(elementArray);
  return convertElementArray(elementArray);
}

exports.elements                = elements;
exports.properties              = properties;
exports.wrapString              = wrapString;
exports.wrapList                = wrapList;
exports.listFromArray           = listFromArray;
exports.wrapTuple               = wrapTuple;
exports.tupleFromArray          = tupleFromArray;
exports.tupleFromList           = tupleFromList;
exports.constructAttribute      = constructAttribute;
exports.constructAttributeArray = constructAttributeArray;
exports.convertElement          = convertElement;
exports.convertElementArray     = convertElementArray;
exports.convert                 = convert;
/* Js_dict Not a pure module */
